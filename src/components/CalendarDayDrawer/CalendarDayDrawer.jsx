import { useEffect, useMemo, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { format, isToday } from "date-fns";
import { toast } from "react-toastify";
import confetti from "canvas-confetti";
import { useCourseStore } from "../../store/courseStore";

export default function CalendarDayDrawer({ date, onClose }) {
  const {
    activeCourse,
    setActiveCourse,
    topicStates,
    setTopicDoneWithDate,
    setTopicNote,
    setTopicRating,
    setTopicMinutes,
    handleRepeatTopic,
  } = useCourseStore();

  const [note, setNote] = useState("");
  const [customTopic, setCustomTopic] = useState("");
  const [minutes, setMinutes] = useState(15);
  const [rating, setRating] = useState(3);
  const [editingIndex, setEditingIndex] = useState(null);

  const formattedDate = date ? format(date, "yyyy-MM-dd") : null;

  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –¥–∞—Ç—É
  const daySessions = useMemo(() => {
    if (!activeCourse || !formattedDate) return [];
    return activeCourse.sessions?.filter(
      (s) => format(new Date(s.date), "yyyy-MM-dd") === formattedDate
    ) || [];
  }, [activeCourse, formattedDate]);

  // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –Ω–∞ –¥–∞—Ç—É
  const doneTopicsForDate = useMemo(() => {
    if (!activeCourse || !formattedDate) return [];
    return activeCourse.chapters.flatMap((chapter, ci) =>
      chapter.topics
        .map((topic, ti) => {
          const key = `${activeCourse.id}-c${ci}-t${ti}`;
          const state = topicStates[key];
          if (state?.done && state?.lastDoneDate?.startsWith(formattedDate)) {
            return {
              chapterIndex: ci,
              topicIndex: ti,
              title: typeof topic === "string" ? topic : topic.title,
              rating: state.rating || 3,
              minutes: state.minutes || 0,
              key,
            };
          }
          return null;
        })
        .filter(Boolean)
    );
  }, [activeCourse, topicStates, formattedDate]);

  useEffect(() => {
    setNote("");
    setCustomTopic("");
    setMinutes(15);
    setRating(3);
    setEditingIndex(null);
  }, [date]);

  if (!date || !activeCourse) return null;

  const updateSessions = (updatedSessions) => {
    const updatedCourse = {
      ...activeCourse,
      sessions: updatedSessions,
    };
    setActiveCourse(updatedCourse);
    localStorage.setItem("activeCourse", JSON.stringify(updatedCourse));
  };

  const handleAddOrEdit = () => {
    if (!customTopic.trim()) return toast.error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É");

    const session = {
      date: date.toISOString(),
      minutes,
      topicId: null,
      customTopic: customTopic.trim(),
      note,
      rating,
    };

    const updatedSessions =
      editingIndex !== null
        ? activeCourse.sessions.map((s, i) =>
            format(new Date(s.date), "yyyy-MM-dd") === formattedDate && i === editingIndex
              ? session
              : s
          )
        : [...(activeCourse.sessions || []), session];

    updateSessions(updatedSessions);

    if (isToday(date)) {
      confetti({ particleCount: 100, spread: 70 });
      toast.success("üéâ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è!");
    }

    toast.success(editingIndex !== null ? "–ó–∞–Ω—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ" : "–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ");

    setCustomTopic("");
    setNote("");
    setMinutes(15);
    setRating(3);
    setEditingIndex(null);
  };

  const handleEdit = (index) => {
    const session = daySessions[index];
    setCustomTopic(session.customTopic || "");
    setNote(session.note || "");
    setMinutes(session.minutes || 15);
    setRating(session.rating || 3);
    setEditingIndex(index);
  };

  const handleDeleteSession = (index) => {
    const updatedSessions = activeCourse.sessions.filter((s, i) =>
      !(format(new Date(s.date), "yyyy-MM-dd") === formattedDate && i === index)
    );
    updateSessions(updatedSessions);
    toast.success("–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
  };

  const handleRepeatTopicClick = (chapterIndex, topicIndex) => {
    handleRepeatTopic(chapterIndex, topicIndex);
    toast.info("üîÑ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è");
  };

  const handleDeleteDoneTopic = (chapterIndex, topicIndex) => {
    setTopicDoneWithDate(chapterIndex, topicIndex, false, {
      date: null,
      rating: null,
      note: null,
      minutes: 0,
    });
    toast.success("–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö");
  };

  return (
    <AnimatePresence>
      <motion.div
        key={formattedDate}
        initial={{ x: "100%" }}
        animate={{ x: 0 }}
        exit={{ x: "100%" }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
        className="fixed top-0 right-0 h-full w-full sm:w-[400px] bg-white dark:bg-zinc-900 shadow-lg z-50 p-6 overflow-y-auto"
      >
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold text-hackerGreen">
            {format(date, "dd MMMM yyyy")}
          </h2>
          <button
            onClick={() => onClose(false)}
            className="text-zinc-500 hover:text-zinc-800 dark:hover:text-white"
          >
            ‚úñÔ∏è
          </button>
        </div>

        <div className="space-y-6">
          {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è */}
          <div>
            <h3 className="text-lg font-semibold mb-2">–ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è</h3>
            {daySessions.length === 0 ? (
              <p className="text-zinc-500 text-sm">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.</p>
            ) : (
              daySessions.map((session, index) => {
                if (session.customTopic) {
                  return (
                    <div
                      key={index}
                      className="p-3 border border-zinc-300 dark:border-zinc-700 rounded bg-zinc-100 dark:bg-zinc-800 relative"
                    >
                      <p className="text-sm">
                        üìù {session.customTopic}
                      </p>
                      <p className="text-xs text-zinc-500">
                        –ú–∏–Ω—É—Ç: {session.minutes} ‚Ä¢ –û—Ü–µ–Ω–∫–∞: {session.rating}/5
                        {session.note && ` ‚Ä¢ –ó–∞–º–µ—Ç–∫–∞: ${session.note}`}
                      </p>
                      <div className="absolute top-2 right-2 flex gap-2">
                        <button
                          onClick={() => handleEdit(index)}
                          className="text-xs text-blue-500 hover:underline"
                        >
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button
                          onClick={() => handleDeleteSession(index)}
                          className="text-xs text-red-500 hover:underline"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  );
                }

                let chapterIndex = null;
                let topicIndex = null;
                for (let ci = 0; ci < activeCourse.chapters.length; ci++) {
                  const ti = activeCourse.chapters[ci].topics.findIndex(
                    (t) => t.id === session.topicId
                  );
                  if (ti !== -1) {
                    chapterIndex = ci;
                    topicIndex = ti;
                    break;
                  }
                }

                const topicTitle =
                  chapterIndex !== null && topicIndex !== null
                    ? typeof activeCourse.chapters[chapterIndex].topics[topicIndex] ===
                      "string"
                      ? activeCourse.chapters[chapterIndex].topics[topicIndex]
                      : activeCourse.chapters[chapterIndex].topics[topicIndex].title
                    : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞";

                return (
                  <div
                    key={index}
                    className="p-3 border border-zinc-300 dark:border-zinc-700 rounded bg-zinc-100 dark:bg-zinc-800 relative"
                  >
                    <p className="text-sm">
                      üìö {topicTitle}
                    </p>
                    <p className="text-xs text-zinc-500">
                      –ú–∏–Ω—É—Ç: {session.minutes} ‚Ä¢ –û—Ü–µ–Ω–∫–∞: {session.rating}/5
                    </p>
                    <div className="absolute top-2 right-2 flex gap-2">
                      <button
                        onClick={() => handleEdit(index)}
                        className="text-xs text-blue-500 hover:underline"
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                      <button
                        onClick={() => handleDeleteSession(index)}
                        className="text-xs text-red-500 hover:underline"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                );
              })
            )}
          </div>

          {/* –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ–º—ã */}
          <div>
            <h3 className="text-lg font-semibold mb-2">–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã</h3>
            {doneTopicsForDate.length === 0 ? (
              <p className="text-zinc-500 text-sm">–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–º –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.</p>
            ) : (
              doneTopicsForDate.map(({ chapterIndex, topicIndex, title, rating, minutes, key }) => (
                <div
                  key={key}
                  className="p-3 border border-green-500 rounded mb-2 bg-green-50 dark:bg-green-900 relative"
                >
                  <p className="font-semibold">{title}</p>
                  <p>–ú–∏–Ω—É—Ç: {minutes} ‚Ä¢ –û—Ü–µ–Ω–∫–∞: {rating}/5</p>
                  <div className="flex gap-2 mt-2">
                    <button
                      className="px-3 py-1 bg-red-500 text-white rounded"
                      onClick={() => handleDeleteDoneTopic(chapterIndex, topicIndex)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                    <button
                      className="px-3 py-1 bg-blue-600 text-white rounded"
                      onClick={() => handleRepeatTopicClick(chapterIndex, topicIndex)}
                    >
                      –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–µ–º—ã */}
          <div>
            <h3 className="text-md font-semibold mb-2">
              {editingIndex !== null ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ" : "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É"}
            </h3>
            <p className="text-xs text-zinc-500 dark:text-zinc-400 mb-2">
              üìå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏ –º–∏–Ω—É—Ç—É ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            </p>

            <label className="text-sm text-zinc-400 dark:text-zinc-500">
              –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:
            </label>
            <input
              type="text"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ—à–∞–ª –∑–∞–¥–∞—á–∏ –Ω–∞ —Ü–∏–∫–ª—ã"
              value={customTopic}
              onChange={(e) => setCustomTopic(e.target.value)}
              className="w-full px-3 py-2 border border-zinc-300 dark:border-zinc-700 dark:bg-zinc-800 dark:text-white rounded mb-2"
            />

            <label className="text-sm text-zinc-400 dark:text-zinc-500">
              –ó–∞–º–µ—Ç–∫–∞:
            </label>
            <textarea
              placeholder="–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–ª, —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –≤—ã–≤–æ–¥—ã..."
              value={note}
              onChange={(e) => setNote(e.target.value)}
              className="w-full px-3 py-2 border border-zinc-300 dark:border-zinc-700 dark:bg-zinc-800 dark:text-white rounded mb-2"
            />

            <div className="flex gap-2 mb-2">
              <div className="w-1/2">
                <label className="text-sm text-zinc-400 dark:text-zinc-500">
                  –ú–∏–Ω—É—Ç:
                </label>
                <input
                  type="number"
                  min="1"
                  max="300"
                  value={minutes}
                  onChange={(e) => setMinutes(Number(e.target.value))}
                  className="w-full px-2 py-1 border border-zinc-300 dark:border-zinc-700 dark:bg-zinc-800 dark:text-white rounded"
                />
              </div>
              <div className="w-1/2">
                <label className="text-sm text-zinc-400 dark:text-zinc-500">
                  –û—Ü–µ–Ω–∫–∞:
                </label>
                <select
                  value={rating}
                  onChange={(e) => setRating(Number(e.target.value))}
                  className="w-full px-2 py-1 border border-zinc-300 dark:border-zinc-700 dark:bg-zinc-800 dark:text-white rounded"
                >
                  <option value="1">üò¥ 1</option>
                  <option value="2">üòê 2</option>
                  <option value="3">üôÇ 3</option>
                  <option value="4">üòé 4</option>
                  <option value="5">üî• 5</option>
                </select>
              </div>
            </div>

            <button
              onClick={handleAddOrEdit}
              className="px-4 py-2 bg-hackerGreen text-black rounded hover:opacity-90 w-full"
            >
              {editingIndex !== null ? "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É"}
            </button>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
}
